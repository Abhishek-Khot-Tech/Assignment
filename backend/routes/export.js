const express = require("express");
const router = express.Router();
const Product = require("../models/productModel");
const Report = require("../models/reportModel");
const User = require("../models/userModel");
const nodemailer = require("nodemailer");
const jsPDF = require("jspdf");
require("jspdf-autotable");
const XLSX = require("xlsx");
const fs = require("fs");
const path = require("path");

// Configure nodemailer
const transporter = nodemailer.createTransporter({
  service: 'gmail', // or your email service
  auth: {
    user: process.env.EMAIL_USER,
    pass: process.env.EMAIL_PASS
  }
});

// Export products to PDF
router.post("/export/pdf", async (req, res) => {
  try {
    const { userId, email, includeImages = false } = req.body;
    
    const user = await User.findById(userId);
    const products = await Product.find({ userId }).sort({ createdAt: -1 });
    
    if (!user || products.length === 0) {
      return res.status(404).json({ error: "No data found" });
    }

    // Create PDF
    const doc = new jsPDF();
    
    // Header with logo and title
    doc.setFontSize(24);
    doc.setTextColor(0, 191, 255);
    doc.text("TransparentAI", 20, 25);
    
    doc.setFontSize(18);
    doc.setTextColor(0, 0, 0);
    doc.text("Products Report", 20, 40);
    
    // User info
    doc.setFontSize(12);
    doc.text(`Generated for: ${user.name}`, 20, 55);
    doc.text(`Email: ${user.email}`, 20, 65);
    doc.text(`Company: ${user.company}`, 20, 75);
    doc.text(`Generated on: ${new Date().toLocaleDateString()}`, 20, 85);
    doc.text(`Total Products: ${products.length}`, 20, 95);

    // Add line separator
    doc.setDrawColor(0, 191, 255);
    doc.line(20, 105, 190, 105);

    // Products table
    const tableData = products.map((product, index) => [
      index + 1,
      product.name,
      product.companyName,
      product.description || "N/A",
      new Date(product.createdAt).toLocaleDateString(),
      Object.keys(product.attributes || {}).length
    ]);

    doc.autoTable({
      head: [["#", "Product Name", "Company", "Description", "Created Date", "Attributes"]],
      body: tableData,
      startY: 115,
      styles: { 
        fontSize: 9, 
        cellPadding: 3,
        overflow: 'linebreak',
        columnWidth: 'wrap'
      },
      headStyles: { 
        fillColor: [0, 191, 255], 
        textColor: [255, 255, 255],
        fontStyle: 'bold'
      },
      alternateRowStyles: { fillColor: [245, 245, 245] },
      columnStyles: {
        0: { cellWidth: 15 },
        1: { cellWidth: 35 },
        2: { cellWidth: 30 },
        3: { cellWidth: 50 },
        4: { cellWidth: 25 },
        5: { cellWidth: 20 }
      }
    });

    // Footer
    const pageCount = doc.internal.getNumberOfPages();
    for (let i = 1; i <= pageCount; i++) {
      doc.setPage(i);
      doc.setFontSize(8);
      doc.setTextColor(128, 128, 128);
      doc.text(`Page ${i} of ${pageCount}`, 170, 285);
      doc.text("Generated by TransparentAI", 20, 285);
    }

    const fileName = `products-report-${Date.now()}.pdf`;
    const filePath = path.join(__dirname, '../uploads', fileName);
    
    // Ensure uploads directory exists
    if (!fs.existsSync(path.join(__dirname, '../uploads'))) {
      fs.mkdirSync(path.join(__dirname, '../uploads'), { recursive: true });
    }

    // Save PDF
    fs.writeFileSync(filePath, doc.output());

    // Create report record
    const report = new Report({
      userId,
      products: products.map(p => p._id),
      reportType: 'pdf',
      fileName,
      pdfUrl: `/uploads/${fileName}`,
      fileSize: fs.statSync(filePath).size,
      status: 'completed'
    });

    // Send email if requested
    if (email) {
      const mailOptions = {
        from: process.env.EMAIL_USER,
        to: email,
        subject: 'Your Products Report - TransparentAI',
        html: `
          <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
            <div style="background: linear-gradient(135deg, #00BFFF, #1E90FF); padding: 20px; text-align: center;">
              <h1 style="color: white; margin: 0;">TransparentAI</h1>
              <p style="color: white; margin: 5px 0;">Products Report</p>
            </div>
            <div style="padding: 20px; background: #f9f9f9;">
              <h2>Hello ${user.name},</h2>
              <p>Your products report has been generated successfully!</p>
              <p><strong>Report Details:</strong></p>
              <ul>
                <li>Total Products: ${products.length}</li>
                <li>Generated on: ${new Date().toLocaleDateString()}</li>
                <li>Format: PDF</li>
              </ul>
              <p>Please find your report attached to this email.</p>
              <p>Best regards,<br>TransparentAI Team</p>
            </div>
          </div>
        `,
        attachments: [{
          filename: fileName,
          path: filePath
        }]
      };

      await transporter.sendMail(mailOptions);
      report.emailSent = true;
      report.sentToEmail = email;
    }

    await report.save();

    res.json({
      success: true,
      fileName,
      downloadUrl: `/uploads/${fileName}`,
      reportId: report._id,
      emailSent: !!email
    });

  } catch (err) {
    console.error("Export PDF error:", err);
    res.status(500).json({ error: err.message });
  }
});

// Export products to Excel
router.post("/export/excel", async (req, res) => {
  try {
    const { userId, email } = req.body;
    
    const user = await User.findById(userId);
    const products = await Product.find({ userId }).sort({ createdAt: -1 });
    
    if (!user || products.length === 0) {
      return res.status(404).json({ error: "No data found" });
    }

    // Create workbook
    const workbook = XLSX.utils.book_new();
    
    // Products sheet
    const productsData = products.map((product, index) => ({
      'S.No': index + 1,
      'Product Name': product.name,
      'Company': product.companyName,
      'Description': product.description || 'N/A',
      'Created Date': new Date(product.createdAt).toLocaleDateString(),
      'Attributes Count': Object.keys(product.attributes || {}).length,
      'Image URL': product.imageUrl || 'N/A'
    }));

    const productsSheet = XLSX.utils.json_to_sheet(productsData);
    XLSX.utils.book_append_sheet(workbook, productsSheet, 'Products');

    // Summary sheet
    const companies = [...new Set(products.map(p => p.companyName))];
    const summaryData = [
      { 'Metric': 'Total Products', 'Value': products.length },
      { 'Metric': 'Total Companies', 'Value': companies.length },
      { 'Metric': 'Report Generated', 'Value': new Date().toLocaleDateString() },
      { 'Metric': 'User Name', 'Value': user.name },
      { 'Metric': 'User Email', 'Value': user.email }
    ];

    const summarySheet = XLSX.utils.json_to_sheet(summaryData);
    XLSX.utils.book_append_sheet(workbook, summarySheet, 'Summary');

    const fileName = `products-report-${Date.now()}.xlsx`;
    const filePath = path.join(__dirname, '../uploads', fileName);
    
    // Ensure uploads directory exists
    if (!fs.existsSync(path.join(__dirname, '../uploads'))) {
      fs.mkdirSync(path.join(__dirname, '../uploads'), { recursive: true });
    }

    // Save Excel file
    XLSX.writeFile(workbook, filePath);

    // Create report record
    const report = new Report({
      userId,
      products: products.map(p => p._id),
      reportType: 'excel',
      fileName,
      pdfUrl: `/uploads/${fileName}`,
      fileSize: fs.statSync(filePath).size,
      status: 'completed'
    });

    // Send email if requested
    if (email) {
      const mailOptions = {
        from: process.env.EMAIL_USER,
        to: email,
        subject: 'Your Products Report (Excel) - TransparentAI',
        html: `
          <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
            <div style="background: linear-gradient(135deg, #00BFFF, #1E90FF); padding: 20px; text-align: center;">
              <h1 style="color: white; margin: 0;">TransparentAI</h1>
              <p style="color: white; margin: 5px 0;">Products Report (Excel)</p>
            </div>
            <div style="padding: 20px; background: #f9f9f9;">
              <h2>Hello ${user.name},</h2>
              <p>Your Excel products report has been generated successfully!</p>
              <p><strong>Report Details:</strong></p>
              <ul>
                <li>Total Products: ${products.length}</li>
                <li>Generated on: ${new Date().toLocaleDateString()}</li>
                <li>Format: Excel (.xlsx)</li>
                <li>Sheets: Products, Summary</li>
              </ul>
              <p>Please find your report attached to this email.</p>
              <p>Best regards,<br>TransparentAI Team</p>
            </div>
          </div>
        `,
        attachments: [{
          filename: fileName,
          path: filePath
        }]
      };

      await transporter.sendMail(mailOptions);
      report.emailSent = true;
      report.sentToEmail = email;
    }

    await report.save();

    res.json({
      success: true,
      fileName,
      downloadUrl: `/uploads/${fileName}`,
      reportId: report._id,
      emailSent: !!email
    });

  } catch (err) {
    console.error("Export Excel error:", err);
    res.status(500).json({ error: err.message });
  }
});

// Get export history
router.get("/export/history/:userId", async (req, res) => {
  try {
    const { userId } = req.params;
    const reports = await Report.find({ userId })
      .populate('products', 'name')
      .sort({ createdAt: -1 });
    
    res.json(reports);
  } catch (err) {
    res.status(400).json({ error: err.message });
  }
});

module.exports = router;